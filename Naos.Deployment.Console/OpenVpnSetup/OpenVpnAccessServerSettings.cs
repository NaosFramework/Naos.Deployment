// --------------------------------------------------------------------------------------------------------------------
// <copyright file="OpenVpnAccessServerSettings.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Deployment.Recipes.OpenVpnSetup source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Deployment.Console
{
    using System.Collections.Generic;

    /// <summary>
    /// Settings for configuring an OpenVPN Access Server.
    /// </summary>
#if !NaosDeploymentConsole
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Deployment.Recipes.OpenVpnSetup", "See package version number")]
#endif
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Vpn", Justification = "Spelling/name is correct.")]
    public class OpenVpnAccessServerSettings
    {
        /// <summary>
        /// Gets or sets the username of the administrator.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId = "Username", Justification = "Spelling/name is correct.")]
        public string AdminUsername { get; set; }

        /// <summary>
        /// Gets or sets the password to use for the administrator.
        /// </summary>
        public string AdminPassword { get; set; }

        /// <summary>
        /// Gets or sets the hostname (e.g. vpn.example.com).
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId = "Hostname", Justification = "Spelling/name is correct.")]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or sets the public subnets (e.g. "10.31.0.0/16") that clients can access.
        /// </summary>
        public IReadOnlyList<string> PrivateSubnetsClientsCanAccess { get; set; }

        /// <summary>
        /// Gets or sets a PEM-encoded concatenated list of CA certificates that validates the web server certificate.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Pem", Justification = "Spelling/name is correct.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Ca", Justification = "Spelling/name is correct.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "Ca", Justification = "Spelling/name is correct.")]
        public string WebserverCaBundlePemEncoded { get; set; }

        /// <summary>
        /// Gets or sets the PEM-encoded certificate for the web server.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        public string WebserverCertificate { get; set; }

        /// <summary>
        /// Gets or sets the PEM-encoded private key for the web server certificate.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Pem", Justification = "Spelling/name is correct.")]
        public string WebserverPrivateKeyPemEncoded { get; set; }

        /// <summary>
        /// Gets or sets the license key.
        /// </summary>
        public string LicenseKey { get; set; }
    }
}
