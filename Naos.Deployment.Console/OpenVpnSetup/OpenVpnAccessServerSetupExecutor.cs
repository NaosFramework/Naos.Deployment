// --------------------------------------------------------------------------------------------------------------------
// <copyright file="OpenVpnAccessServerSetupExecutor.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Deployment.Recipes.OpenVpnSetup source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Deployment.Console
{
    using System;
    using System.Threading;
    using OBeautifulCode.Validation.Recipes;

    using static System.FormattableString;

    /// <summary>
    /// Performs setup on an Open VPN Access Server.
    /// </summary>
    /// <remarks>
    /// Here are some more things we could do to improve security: <a href="https://openvpn.net/vpn-server-resources/recommendations-to-improve-security-after-installation/" />.
    /// </remarks>
#if !NaosDeploymentConsole
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Deployment.Recipes.OpenVpnSetup", "See package version number")]
#endif
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Vpn", Justification = "Spelling/name is correct.")]
    public static class OpenVpnAccessServerSetupExecutor
    {
        private const string DefaultVpnAdminAccountUsername = "openvpn";

        /// <summary>
        /// Executes the commands required to setup an Open VPN Access Server.
        /// </summary>
        /// <param name="connectionSettings">The connection settings.</param>
        /// <param name="vpnSettings">The OpenVPN Access Server settings.</param>
        /// <param name="logger">Optional logger.  Default is to log nothing.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "vpn", Justification = "Spelling/name is correct.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Vpn", Justification = "Spelling/name is correct.")]
        public static void SetupVpnServer(
            SshConnectionSettings connectionSettings,
            OpenVpnAccessServerSettings vpnSettings,
            Action<string> logger = null)
        {
            new { connectionSettings }.Must().NotBeNull();
            new { vpnSettings }.Must().NotBeNull();

            vpnSettings.AdminPassword.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.AdminPassword)}")).Must().NotBeNullNorWhiteSpace();
            vpnSettings.AdminUsername.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.AdminUsername)}")).Must().NotBeNullNorWhiteSpace();
            vpnSettings.Hostname.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.Hostname)}")).Must().NotBeNullNorWhiteSpace();
            vpnSettings.PrivateSubnetsClientsCanAccess.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.PrivateSubnetsClientsCanAccess)}")).Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();
            vpnSettings.WebserverCaBundlePemEncoded.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.WebserverCaBundlePemEncoded)}")).Must().NotBeNullNorWhiteSpace();
            vpnSettings.WebserverCertificate.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.WebserverCertificate)}")).Must().NotBeNullNorWhiteSpace();
            vpnSettings.WebserverPrivateKeyPemEncoded.Named(Invariant($"{nameof(vpnSettings)}.{nameof(OpenVpnAccessServerSettings.WebserverPrivateKeyPemEncoded)}")).Must().NotBeNullNorWhiteSpace();

            using (var sshClient = connectionSettings.BuildConnectedSshClient())
            {
                // initialize
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.InitializeServer, logger);
                Thread.Sleep(TimeSpan.FromSeconds(5));

                // disable default admin user (which exists as both a VPN user account and a system user account)
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.DeleteUser.InsertUsername(DefaultVpnAdminAccountUsername), logger);
                sshClient.RunCommandAndThrowOnError(BashCommands.LockUserAccount.InsertUsername(DefaultVpnAdminAccountUsername), logger);

                // add a VPN-only admin user account
                // Why don't we need a system user account like 'openvpn'?
                // from OpenVPN: "The reason the 'openvpn' is so different is because it is tied directly to the PAM authentication system, regardless of what authentication system you use for all your other users. And the reason we do that is because if you set authentication to LDAP, and you have your LDAP settings wrong, or there is a problem communicating with the LDAP server, then you have no way to get in. Except with the 'openvpn' account."
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.AddUser.InsertUsername(vpnSettings.AdminUsername), logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.UpdateUserPassword.InsertUsername(vpnSettings.AdminUsername).InsertPassword(vpnSettings.AdminPassword), logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.MakeUserAdmin.InsertUsername(vpnSettings.AdminUsername), logger);

                // configure settings
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.SetHostname.InsertHostname(vpnSettings.Hostname), logger);
                for (var x = 0; x < vpnSettings.PrivateSubnetsClientsCanAccess.Count; x++)
                {
                    var subnet = vpnSettings.PrivateSubnetsClientsCanAccess[x];
                    sshClient.RunCommandAndThrowOnError(OpenVpnCommands.SetPrivateSubnetClientsCanAccess.InsertSubnet(subnet).InsertArrayIndex(x), logger);
                }

                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.RequireGoogleAuthenticatorCodeOnEveryLogin, logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.DoNotRouteClientInternetTrafficThroughVpn, logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.DoNotAlterClientDnsServerSettings, logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.UseHighestTlsVersionForVpnServer, logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.UseHighestTlsVersionForWebserver, logger);

                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.AddWebserverCaBundlePemEncoded.InsertPemEncodedCryptographicResource(vpnSettings.WebserverCaBundlePemEncoded), logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.AddWebserverCertificate.InsertPemEncodedCryptographicResource(vpnSettings.WebserverCertificate), logger);
                sshClient.RunCommandAndThrowOnError(OpenVpnCommands.AddWebserverPrivateKeyPemEncoded.InsertPemEncodedCryptographicResource(vpnSettings.WebserverPrivateKeyPemEncoded), logger);
            }

            using (var sshClient = connectionSettings.RebootAndReconnect(logger))
            {
                // apply security updates by forcing a run of unattended-upgrade
                // while unattended-upgrades is configured to run in the background out-of-the-box
                // (from OpenVPN: "I can confirm that unattended-upgrades are already configured on newest available EC2 BYOL AMI (AS version 2.6.1)")
                // we cannot be sure that is has already been run, so we just force it for safety sake
                // https://openvpn.net/vpn-server-resources/keeping-openvpn-access-server-updated/
                sshClient.RunCommandAndThrowOnError(BashCommands.UnattendedUpgrade, logger);
            }

            using (var sshClient = connectionSettings.RebootAndReconnect(logger))
            {
                if (!string.IsNullOrWhiteSpace(vpnSettings.LicenseKey))
                {
                    sshClient.RunCommandAndThrowOnError(OpenVpnCommands.RegisterLicenseKey.InsertOpenVpnAccessServerLicenseKey(vpnSettings.LicenseKey), logger);
                }
            }

            using (connectionSettings.RebootAndReconnect(logger))
            {
            }
        }
    }
}
