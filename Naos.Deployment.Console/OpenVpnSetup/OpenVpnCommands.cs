// --------------------------------------------------------------------------------------------------------------------
// <copyright file="OpenVpnCommands.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Deployment.Recipes.OpenVpnSetup source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Deployment.Console
{
    using System.Diagnostics.CodeAnalysis;

    using static System.FormattableString;

    /// <summary>
    /// Contains various commonly-used OpenVPN commands.
    /// </summary>
#if !NaosDeploymentConsole
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Deployment.Recipes.OpenVpnSetup", "See package version number")]
#endif
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Vpn", Justification = "Spelling/name is correct.")]
    public static class OpenVpnCommands
    {
        /// <summary>
        /// The command to dump the current configuration.
        /// </summary>
        // ReSharper disable once UnusedMember.Global
        public static readonly string DumpConfig = "sudo {CliPath} ConfigQuery";

        /// <summary>
        /// The command to initialize/setup an OpenVPN Access Server using the default configuration values.
        /// </summary>
        // ReSharper disable once StringLiteralTypo
        public static readonly string InitializeServer = "sudo ovpn-init --batch";

        /// <summary>
        /// The command to add a VPN user.
        /// </summary>
        public static readonly string AddUser = Invariant($"sudo {CliPath} --user {CommandTokens.Username} --key \"type\" --value \"user_connect\" UserPropPut");

        /// <summary>
        /// The command to delete a VPN user account.
        /// </summary>
        public static readonly string DeleteUser = $"sudo {CliPath} --user {CommandTokens.Username} UserPropDelAll";

        /// <summary>
        /// The command to update a VPN user's password.
        /// </summary>
        public static readonly string UpdateUserPassword = $"sudo {CliPath} --user {CommandTokens.Username} --new_pass $'{CommandTokens.Password}' SetLocalPassword";

        /// <summary>
        /// The command to make a VPN user an admin.
        /// </summary>
        public static readonly string MakeUserAdmin = $"sudo {CliPath} --user {CommandTokens.Username} --key \"prop_superuser\" --value \"true\" UserPropPut";

        /// <summary>
        /// The command to set a hostname (e.g. vpn.example.com).
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId = "Hostname")]
        public static readonly string SetHostname = $"sudo {CliPath} --key \"host.name\" --value \"{CommandTokens.Hostname}\" ConfigPut";

        /// <summary>
        /// The command to set a private subset that clients can access (e.g. "10.31.0.0/16").
        /// </summary>
        public static readonly string SetPrivateSubnetClientsCanAccess = $"sudo {CliPath} --key \"vpn.server.routing.private_network.{CommandTokens.ArrayIndex}\" --value \"{CommandTokens.Subnet}\" ConfigPut";

        /// <summary>
        /// The command to require a Google Authenticator code on every login.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Login", Justification = "'Login' is the preferred term in this usage.")]
        public static readonly string RequireGoogleAuthenticatorCodeOnEveryLogin = $"sudo {CliPath} --key \"vpn.server.google_auth.enable\" --value \"true\" ConfigPut";

        /// <summary>
        /// The command to stop routing client internet traffic through the VPN.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Vpn")]
        public static readonly string DoNotRouteClientInternetTrafficThroughVpn = $"sudo {CliPath} --key \"vpn.client.routing.reroute_gw\" --value \"false\" ConfigPut";

        /// <summary>
        /// The command to add a PEM-encoded concatenated list of CA certificates that validates the web server certificate.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Pem", Justification = "Spelling/name is correct.")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Ca", Justification = "Spelling/name is correct.")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "Ca", Justification = "Spelling/name is correct.")]
        public static readonly string AddWebserverCaBundlePemEncoded = $"sudo {CliPath} --key \"cs.ca_bundle\" --value $'{CommandTokens.CryptographicResourcePemEncoded}' ConfigPut";

        /// <summary>
        /// The command to add the PEM-encoded certificate for the web server.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        public static readonly string AddWebserverCertificate = $"sudo {CliPath} --key \"cs.cert\" --value $'{CommandTokens.CryptographicResourcePemEncoded}' ConfigPut";

        /// <summary>
        /// The command to add the PEM-encoded private key for the web server certificate.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        // ReSharper disable once StringLiteralTypo
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Pem")]
        public static readonly string AddWebserverPrivateKeyPemEncoded = $"sudo {CliPath} --key \"cs.priv_key\" --value $'{CommandTokens.CryptographicResourcePemEncoded}' ConfigPut";

        /// <summary>
        /// The command to add a license key to the VPN server.
        /// </summary>
        public static readonly string RegisterLicenseKey = $"sudo {CliPath} --lic_key \"{CommandTokens.OpenVpnAccessServerLicenseKey}\" LicActivate";

        /// <summary>
        /// The command to use the highest TLS version (1.2) for the web server.
        /// </summary>
        // ReSharper disable once IdentifierTypo
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Tls")]
        public static readonly string UseHighestTlsVersionForWebserver = $"sudo {CliPath} --key \"cs.tls_version_min\" --value \"1.2\" ConfigPut";

        /// <summary>
        /// The command to use the highest TLS version (1.2) for the VPN server.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Vpn")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Tls")]
        public static readonly string UseHighestTlsVersionForVpnServer = $"sudo {CliPath} --key \"vpn.server.tls_version_min\" --value \"1.2\" ConfigPut";

        /// <summary>
        /// The command to specify that the client's DNS server settings should not be altered.
        /// </summary>
        public static readonly string DoNotAlterClientDnsServerSettings = $"sudo {CliPath} --key \"vpn.client.routing.reroute_dns\" --value \"false\" ConfigPut";

        private const string CliPath = "/usr/local/openvpn_as/scripts/sacli";
    }
}
