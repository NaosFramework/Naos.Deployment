// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SshConnectionHelper.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Deployment.Recipes.OpenVpnSetup source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Deployment.Console
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Security.Cryptography;
    using System.Text;

    using Naos.Recipes.RunWithRetry;

    using OBeautifulCode.Security.Recipes;
    using OBeautifulCode.Assertion.Recipes;

    using Renci.SshNet;
    using Renci.SshNet.Common;

    using static System.FormattableString;

    /// <summary>
    /// Contains helper methods to build an SSH connection.
    /// </summary>
#if !NaosDeploymentConsole
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Deployment.Recipes.OpenVpnSetup", "See package version number")]
#endif
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Ssh", Justification = "Spelling/name is correct.")]
    public static class SshConnectionHelper
    {
#pragma warning disable CS3002 // Return type is not CLS-compliant
        /// <summary>
        /// Uses the specified configuration to setup an Open VPN Access Server.
        /// </summary>
        /// <returns>
        /// A connected SSH client.
        /// </returns>
        /// <param name="connectionSettings">The connection settings.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Ssh", Justification = "Spelling/name is correct.")]
        public static SshClient BuildConnectedSshClient(
            this SshConnectionSettings connectionSettings)
#pragma warning restore CS3002 // Return type is not CLS-compliant
        {
            new { connectionSettings }.AsArg().Must().NotBeNull();
            connectionSettings.ServerAddress.AsArg(Invariant($"{nameof(connectionSettings)}.{nameof(SshConnectionSettings.ServerAddress)}")).Must().NotBeNullNorWhiteSpace();
            connectionSettings.Username.AsArg(Invariant($"{nameof(connectionSettings)}.{nameof(SshConnectionSettings.Username)}")).Must().NotBeNullNorWhiteSpace();
            connectionSettings.UserPemEncodedPrivateKey.AsArg(Invariant($"{nameof(connectionSettings)}.{nameof(SshConnectionSettings.UserPemEncodedPrivateKey)}")).Must().NotBeNullNorWhiteSpace();
            connectionSettings.ServerPublicKeyAlgorithmToBase64Sha256ThumbprintMap.AsArg(Invariant($"{nameof(connectionSettings)}.{nameof(SshConnectionSettings.ServerPublicKeyAlgorithmToBase64Sha256ThumbprintMap)}")).Must().NotBeNullNorEmptyEnumerable();

            var privateKeyFile = connectionSettings.CreatePrivateKeyFile();
            try
            {
                using (var connectionInfo = new PrivateKeyConnectionInfo(connectionSettings.ServerAddress, connectionSettings.Username, privateKeyFile))
                {
                    var result = new SshClient(connectionInfo);

                    try
                    {
                        result.HostKeyReceived += (sender, e) =>
                        {
                            VerifyServerThumbprintEventHandler(e, connectionSettings.ServerPublicKeyAlgorithmToBase64Sha256ThumbprintMap);
                        };

                        result.Connect();

                        return result;
                    }
                    catch (Exception)
                    {
                        result.Dispose();
                        throw;
                    }
                }
            }
            catch (Exception)
            {
                privateKeyFile.Dispose();
                throw;
            }
        }

        /// <summary>
        /// Determines if an SSH connection can be made.
        /// </summary>
        /// <param name="connectionSettings">The connection settings.</param>
        /// <returns>
        /// true if an SSH connection can be made; otherwise, false.
        /// </returns>
        // ReSharper disable once UnusedMember.Global
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Nothing to do here, want to see if it throws.")]
        public static bool CanConnect(
            this SshConnectionSettings connectionSettings)
        {
            new { connectionSettings }.AsArg().Must().NotBeNull();

            try
            {
                using (var sshClient = connectionSettings.BuildConnectedSshClient())
                {
                    sshClient.RunCommandAndThrowOnError(BashCommands.EchoNothing);

                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

#pragma warning disable CS3002 // Return type is not CLS-compliant
        /// <summary>
        /// Reboots the server and reconnects.
        /// </summary>
        /// <param name="connectionSettings">The connection settings.</param>
        /// <param name="logger">Optional logger.  Default is to log nothing.</param>
        /// <returns>
        /// A connected SSH client.
        /// </returns>
        public static SshClient RebootAndReconnect(
            this SshConnectionSettings connectionSettings,
            Action<string> logger = null)
#pragma warning restore CS3002 // Return type is not CLS-compliant
        {
            new { connectionSettings }.AsArg().Must().NotBeNull();

            using (var sshClient = connectionSettings.BuildConnectedSshClient())
            {
                try
                {
                    sshClient.RunCommandAndThrowOnError(BashCommands.Reboot, logger);
                }
                catch (SshConnectionException)
                {
                }
            }

            Run.WithRetry(() =>
            {
                using (var sshClient = connectionSettings.BuildConnectedSshClient())
                {
                    sshClient.RunCommandAndThrowOnError(BashCommands.EchoNothing, logger);

                    return true;
                }
            });

            var result = connectionSettings.BuildConnectedSshClient();
            return result;
        }

        private static PrivateKeyFile CreatePrivateKeyFile(
            this SshConnectionSettings connectionSettings)
        {
            var privateKey = CertHelper.ReadPrivateKeyFromPemEncodedString(connectionSettings.UserPemEncodedPrivateKey).AsPemEncodedString();

            PrivateKeyFile result;
            using (var ms = new MemoryStream(Encoding.UTF8.GetBytes(privateKey)))
            {
                result = new PrivateKeyFile(ms);
            }

            return result;
        }

        private static void VerifyServerThumbprintEventHandler(
            HostKeyEventArgs hostKeyEventArgs,
            IReadOnlyDictionary<HostKeyAlgorithm, string> keyAlgorithmToThumbprintMap)
        {
            HostKeyAlgorithm hostKeyAlgorithm;
            switch (hostKeyEventArgs.HostKeyName)
            {
                case "ssh-rsa":
                    hostKeyAlgorithm = HostKeyAlgorithm.Rsa;
                    break;
                case "ssh-dss":
                    hostKeyAlgorithm = HostKeyAlgorithm.Dsa;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"Cannot verify the thumbprint of the server's public key.  The following host key algorithm is not supported: {hostKeyEventArgs.HostKeyName}"));
            }

            if (!keyAlgorithmToThumbprintMap.TryGetValue(hostKeyAlgorithm, out var expectedThumbprint))
            {
                hostKeyEventArgs.CanTrust = false;
                return;
            }

            using (var sha256 = SHA256.Create())
            {
                var actualThumbprintBytes = sha256.ComputeHash(hostKeyEventArgs.HostKey);

                // the actual thumbprint consistently has a trailing '=' added to the string for RSA keys; not sure why
                var actualThumbprint = Convert.ToBase64String(actualThumbprintBytes).TrimEnd('=');
                if (expectedThumbprint != actualThumbprint)
                {
                    hostKeyEventArgs.CanTrust = false;
                }
            }
        }
    }
}
