// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SshConnectionSettings.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Deployment.Recipes.OpenVpnSetup source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Deployment.Console
{
    using System.Collections.Generic;

    /// <summary>
    /// Settings for connecting to an SSH server.
    /// </summary>
#if !NaosDeploymentConsole
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Deployment.Recipes.OpenVpnSetup", "See package version number")]
#endif
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Ssh", Justification = "Spelling/name is correct.")]
    public class SshConnectionSettings
    {
        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId = "Username", Justification = "Spelling/name is correct.")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the PEM-encoded private key for user.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Pem", Justification = "Spelling/name is correct.")]
        public string UserPemEncodedPrivateKey { get; set; }

        /// <summary>
        /// Gets or sets the server host address (e.g. DNS or IP address).
        /// </summary>
        public string ServerAddress { get; set; }

        /// <summary>
        /// Gets or sets a map of key algorithm to Base64 encoded SHA-256 fingerprint of the
        /// server public key that was generated with that algorithm.
        /// </summary>
        /// <remarks>
        /// The client and server will negotiate which key algorithm to use, so specifying multiple fingerprints
        /// increases the likelihood of verifying the server and allowing the connection.
        /// Here's some more info about the fingerprint encoding: <a href="https://superuser.com/a/929567/71134" />.
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Sha", Justification = "Spelling/name is correct.")]
        public IReadOnlyDictionary<HostKeyAlgorithm, string> ServerPublicKeyAlgorithmToBase64Sha256ThumbprintMap { get; set; }
    }
}
